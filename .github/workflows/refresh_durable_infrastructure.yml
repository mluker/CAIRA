# yamllint disable-line rule:line-length
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
---
name: Refresh Durable Infrastructure Pools

# Runs weekly on Sunday at 3am UTC to refresh test infrastructure pools
# Ensures storage account names remain unique and infrastructure is clean
on:
  schedule:
    - cron: "0 3 * * 0" # Sunday at 3am UTC
  workflow_dispatch: # Allow manual triggers
    inputs: #checkov:skip=CKV_GHA_7
      skip_destroy:
        description: "Skip destroy step (create only)"
        required: false
        type: boolean
        default: false

permissions:
  contents: write # Needed to update repository variables
  id-token: write # OIDC authentication
  actions: write # Needed to update repository variables

env:
  OWNER: "microsoft/caira-mtain"
  LOCATION: "swedencentral"

jobs:
  # Check if infrastructure pools exist
  check-infrastructure:
    name: Check Infrastructure
    runs-on: ubuntu-24.04
    outputs:
      fsp_exists: ${{ steps.check_fsp.outputs.exists }}
      fbp_exists: ${{ steps.check_fbp.outputs.exists }}
    env:
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      ARM_TENANT_ID: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: üîê Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
        with:
          client-id: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
          subscription-id: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}

      - name: üîç Check Foundry Standard Private Pool
        id: check_fsp
        run: |
          GROUP_NAME="rg-fstdprv-durable"
          if az group show --name "$GROUP_NAME" \
              --query "name" -o tsv 2>/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Foundry Standard Private pool exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "‚ùå Foundry Standard Private pool does not exist"
          fi

      - name: üîç Check Foundry Basic Private Pool
        id: check_fbp
        run: |
          GROUP_NAME="rg-fbscprv-durable"
          if az group show --name "$GROUP_NAME" \
              --query "name" -o tsv 2>/dev/null; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ Foundry Basic Private pool exists"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "‚ùå Foundry Basic Private pool does not exist"
          fi

  # Destroy existing infrastructure using Azure CLI (stateless approach)
  destroy-infrastructure:
    name: Destroy Infrastructure
    needs: check-infrastructure
    if: |
      !inputs.skip_destroy &&
      (needs.check-infrastructure.outputs.fsp_exists == 'true' ||
        needs.check-infrastructure.outputs.fbp_exists == 'true')
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      ARM_TENANT_ID: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: üîê Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
        with:
          client-id: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
          subscription-id: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}

      - name: üóëÔ∏è Destroy Foundry Standard Private Pool
        if: needs.check-infrastructure.outputs.fsp_exists == 'true'
        run: |
          echo "üóëÔ∏è Deleting resource group: rg-fstdprv-durable"
          az group delete --name "rg-fstdprv-durable" --yes --no-wait
          echo "‚úÖ Deletion started for Foundry Standard Private pool"

      - name: üóëÔ∏è Destroy Foundry Basic Private Pool
        if: needs.check-infrastructure.outputs.fbp_exists == 'true'
        run: |
          echo "üóëÔ∏è Deleting resource group: rg-fbscprv-durable"
          az group delete --name "rg-fbscprv-durable" --yes --no-wait
          echo "‚úÖ Deletion started for Foundry Basic Private pool"

      - name: ‚è≥ Wait for deletions to complete
        run: |
          echo "‚è≥ Waiting for resource group deletions to complete..."

          # Wait for FSP deletion
          FSP_EXISTS="${{ needs.check-infrastructure.outputs.fsp_exists }}"
          if [ "$FSP_EXISTS" == "true" ]; then
            echo "Waiting for rg-fstdprv-durable deletion..."
            while az group show --name "rg-fstdprv-durable" &>/dev/null; do
              echo "  Still deleting..."
              sleep 30
            done
            echo "‚úÖ rg-fstdprv-durable deleted"
          fi

          # Wait for FBP deletion
          FBP_EXISTS="${{ needs.check-infrastructure.outputs.fbp_exists }}"
          if [ "$FBP_EXISTS" == "true" ]; then
            echo "Waiting for rg-fbscprv-durable deletion..."
            while az group show --name "rg-fbscprv-durable" &>/dev/null; do
              echo "  Still deleting..."
              sleep 30
            done
            echo "‚úÖ rg-fbscprv-durable deleted"
          fi

          echo "‚è≥ Waiting additional 2 minutes for Azure cleanup..."
          sleep 120

  # Deploy fresh infrastructure pools
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [check-infrastructure, destroy-infrastructure]
    if: |
      always() &&
      (needs.destroy-infrastructure.result == 'success' ||
        needs.destroy-infrastructure.result == 'skipped')
    runs-on: ubuntu-24.04
    timeout-minutes: 90
    outputs:
      fsp_storage_account_name: >-
        ${{ steps.get_fsp_outputs.outputs.storage_account_name }}
      fbp_vnet_name: ${{ steps.get_fbp_outputs.outputs.vnet_name }}
    env:
      ARM_USE_AZUREAD: true
      ARM_USE_OIDC: true
      ARM_TENANT_ID: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: ‚§µÔ∏è Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: üîê Azure Login
        uses: azure/login@a65d910e8af852a8061c627c456678983e180302 # v2.2.0
        with:
          client-id: ${{ vars.PERSISTENT_SUB_AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.PERSISTENT_SUB_AZURE_TENANT_ID }}
          subscription-id: ${{ vars.PERSISTENT_SUB_AZURE_SUBSCRIPTION_ID }}

      - name: üöß Setup Terraform
        uses: >-
          hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_wrapper: false # Needed to capture outputs

      - name: üèóÔ∏è Deploy Foundry Basic Private Pool
        working-directory: ./testing/infrastructure_pools/foundry_basic_private
        run: |
          echo "üîß Initializing Terraform..."
          terraform init -upgrade

          echo "üìã Planning deployment..."
          terraform plan -var="location=${{ env.LOCATION }}" -out=tfplan

          echo "üöÄ Applying deployment..."
          terraform apply -auto-approve tfplan

          echo "‚úÖ Foundry Basic Private pool deployed"

      - name: üì§ Get Foundry Basic Private Outputs
        id: get_fbp_outputs
        working-directory: >-
          ./testing/infrastructure_pools/foundry_basic_private
        run: |
          VNET_ID=$(terraform output -raw virtual_network_id)
          VNET_NAME=$(echo "$VNET_ID" | awk -F'/' '{print $9}')
          echo "vnet_name=${VNET_NAME}" >> "$GITHUB_OUTPUT"
          echo "üìä VNet Name: ${VNET_NAME}"

      - name: üèóÔ∏è Deploy Foundry Standard Private Pool
        working-directory: >-
          ./testing/infrastructure_pools/foundry_standard_private
        run: |
          echo "üîß Initializing Terraform..."
          terraform init -upgrade

          echo "üìã Planning deployment..."
          terraform plan -var="location=${{ env.LOCATION }}" -out=tfplan

          echo "üöÄ Applying deployment..."
          terraform apply -auto-approve tfplan

          echo "‚úÖ Foundry Standard Private pool deployed"

      - name: üì§ Get Foundry Standard Private Outputs
        id: get_fsp_outputs
        working-directory: >-
          ./testing/infrastructure_pools/foundry_standard_private
        run: |
          SA_NAME=$(terraform output -raw storage_account_name)
          echo "storage_account_name=${SA_NAME}" >> "$GITHUB_OUTPUT"
          echo "üìä Storage Account Name: ${SA_NAME}"

  # Update GitHub repository variable with new storage account name
  update-github-variables:
    name: Update GitHub Variables
    needs: deploy-infrastructure
    runs-on: ubuntu-24.04
    steps:
      - name: üìù Update TF_VAR_FSP_STORAGE_ACCOUNT_NAME
        uses: >-
          actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd
        with:
          github-token: ${{ github.token }}
          script: |
            const deployOutputs = context.payload.needs ||
              ${{ toJSON(needs) }};
            const fspOutput = deployOutputs['deploy-infrastructure']
              ?.outputs?.fsp_storage_account_name ||
              # yamllint disable-line rule:line-length
              '${{ needs.deploy-infrastructure.outputs.fsp_storage_account_name }}';
            const storageAccountName = fspOutput;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const varName = 'TF_VAR_FSP_STORAGE_ACCOUNT_NAME';
            console.log(`üìù Updating ${varName}`);
            console.log(`Value: ${storageAccountName}`);

            // Check if variable exists
            let variableExists = false;
            try {
              await github.rest.actions.getRepoVariable({
                owner,
                repo,
                name: 'TF_VAR_FSP_STORAGE_ACCOUNT_NAME'
              });
              variableExists = true;
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            // Update or create variable
            if (variableExists) {
              await github.rest.actions.updateRepoVariable({
                owner,
                repo,
                name: 'TF_VAR_FSP_STORAGE_ACCOUNT_NAME',
                value: storageAccountName
              });
              console.log('‚úÖ Variable updated successfully');
            } else {
              await github.rest.actions.createRepoVariable({
                owner,
                repo,
                name: 'TF_VAR_FSP_STORAGE_ACCOUNT_NAME',
                value: storageAccountName
              });
              console.log('‚úÖ Variable created successfully');
            }

      - name: üìã Summary
        run: |
          # yamllint disable-line rule:line-length
          FSP_SA="${{ needs.deploy-infrastructure.outputs.fsp_storage_account_name }}"
          FBP_VNET="${{ needs.deploy-infrastructure.outputs.fbp_vnet_name }}"
          {
            echo "## üéâ Durable Infrastructure Refresh Complete"
            echo ""
            echo "### üìä Deployed Resources"
            echo ""
            echo "**Foundry Standard Private Pool:**"
            echo "- Resource Group: \`rg-fstdprv-durable\`"
            echo "- Storage Account: \`${FSP_SA}\`"
            echo "- Location: \`${{ env.LOCATION }}\`"
            echo ""
            echo "**Foundry Basic Private Pool:**"
            echo "- Resource Group: \`rg-fbscprv-durable\`"
            echo "- VNet: \`${FBP_VNET}\`"
            echo "- Location: \`${{ env.LOCATION }}\`"
            echo ""
            echo "### ‚úÖ Actions Completed"
            VAR_NAME="TF_VAR_FSP_STORAGE_ACCOUNT_NAME"
            echo "- GitHub variable \`${VAR_NAME}\` updated"
            echo "- All infrastructure pools ready for testing"
          } >> "$GITHUB_STEP_SUMMARY"
